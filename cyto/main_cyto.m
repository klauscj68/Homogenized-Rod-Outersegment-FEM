% Programma per la soluzione del problema omogeneizzato della diffusione dei secondi messaggeri 
% nel cytosol del bastoncello con incisure (problema della fototrasduzione)
% Code for solving the homogenized problem of cytosol diffusion of second messengers 
% of rod with incisures (fototransduction problem)
function main_cyto

% % % profile on

% % % % pulizia
% % % % cleaning
% % % clear all;
% % % close all;

% aggiunge alla path i file comuni, gli elementi, ed il problema sul disco
path('../common',path);
path('../elements',path);
path('../id',path);

% legge i dati
[R, H, n_sez, flag_geom_sp, dz_0, ...
    n_sd, Z_sd, ...
    n_inc, inc, ...
    taglia, tol_R, tol_angle, ...
    n_ref_cyto, n_ref_id, metodo_cyto, metodo_id, ...
    solver, theta, alpha, tol_fix, norma_inf, peak_delta, ...
    t_fin, n_step_t, downsample, ...
    plot_mesh, plot_num, plot_niagara, plot_pool , inspect, ...
    u_tent, v_tent, tol_stat, ...
    flag_model, flag_model_disc, flag_Ca_clamp, ...
    mode_time, mode_space, n_step_R, mu, lambda, ...
    nu_RE, nu_RG, cc_R_st, D_R_st, ...
    n_Phi, Phi, random_location, ...
    k_GE, cc_G_st, D_G_st, ...
    k_hyd, PDE_s, k_st, ...
    cc_E_st, D_E_st, k_E, ...
    MC_disk, ...
    n_sample, ...
    epsilon_0, nu, sigma, ...
    cc_u, kk_u, cc_v, kk_v, ...
    alpha_max, alpha_min, m_cyc, k_cyc, ...
    B_ca, F, j_cg_max, f_ca, m_cg, K_cg, ...
    j_ex_sat, K_ex]=data;
    
% costruisce la mesh
% mesh construction
[n_pd, n_int_pd, n_tri, n_os, n_p_inc, ...
         os2pd, inc2pd, pd2int_pd, p_pd, t_pd, ...
         n_ipd, p_ipd, p_ipd_bea, t_ipd, ipd2pd, ...
         n_pd_id, n_int_pd_id, n_tri_id, n_os_id, n_p_inc_id, ...
         os2pd_id, inc2pd_id, pd2int_pd_id, p_pd_id, t_pd_id, ...
         n_ipd_id, p_ipd_id, p_ipd_bea_id, t_ipd_id, ipd2pd_id, ...
         Z_s, sd2sez]=...
     genemesh(R, H, n_sez, flag_geom_sp, dz_0, ...
     n_sd, Z_sd, ...
     n_inc, inc, ...
     taglia, tol_R, tol_angle, n_ref_cyto, n_ref_id, ...
     plot_mesh, plot_num, inspect);

% annullamento dei flussi al bordo per il calcolo della soluzione stazionaria
% steady-state solution computed by imposing vanishing boundary fluxes
[u_ss,v_ss]=steady_state(R, H, nu, epsilon_0, ...
    k_hyd, PDE_s, alpha_max, alpha_min, m_cyc, k_cyc, ...
    B_ca, F, j_cg_max, f_ca, m_cg, K_cg, j_ex_sat, K_ex, ...
    u_tent, v_tent, tol_stat);
u_ss
v_ss


% gradi di libertà corrispondenti ai nodi del volume, dei dischi speciali, delle incisure, dell'outer shell
% degrees of freedom of the nodes in the volume, special discs, incisures, outer shell
[n_gdl, gdl_vol, gdl_sd, gdl_os, gdl_inc]=...
    gdl(n_pd, n_int_pd, n_os, n_inc, n_p_inc, ...
    n_sez, n_sd, ...
    os2pd, inc2pd, pd2int_pd, sd2sez, flag_model, inspect);




% assembla le matrici globali e predispone per l'integrazione nel tempo
% del problema omogeneizzato
[M_vol, M_sd, M_os, M_gl, K_gl, LL, UU, RR, p]=...
    factor(R, H, n_sez, n_sd, ...
    n_pd, n_tri, n_os, n_inc, n_p_inc, ...
    os2pd, inc2pd, ...
    p_pd, t_pd, Z_s, Z_sd, inc, ...
    n_gdl, gdl_vol, gdl_sd, gdl_os, gdl_inc,...
    t_fin, n_step_t, metodo_cyto, theta, ...
    epsilon_0, nu, sigma, ...
    cc_u, kk_u, cc_v, kk_v);


% save mesh_gws
% 
% stop


% legge E_st, densità di fosfodiesterasi per ogni campione aleatorio
% read E_st, PDE* density for every random sample
load('E_st');

% integrazione nel tempo del problema omogeneizzato di diffusione del cGMP e Ca2+ nel citosol
% time integration of the homogenized problem of diffusion of cGMP and Ca2+ in the cytosol
[time, sol, curr_tot]=integrazione_tempo(R, H, n_sez, n_sd, ...
    n_pd, n_tri, n_os, n_inc, n_p_inc, ...
    os2pd, inc2pd, ...
    p_pd, t_pd, Z_s, ...
    n_gdl, gdl_vol, gdl_sd, gdl_os, gdl_inc,...
    t_fin, n_step_t, downsample, ...
    metodo_cyto, solver, theta, alpha, tol_fix, norma_inf, inspect, flag_Ca_clamp, ...
    M_vol, M_sd, M_os, M_gl, K_gl, LL, UU, RR, p, ...
    n_sample, ...
    epsilon_0, nu, sigma, ...
    k_hyd, PDE_s, k_st, nu_RE, ...
    alpha_max, alpha_min, m_cyc, k_cyc, ...
    B_ca, F, j_cg_max, f_ca, m_cg, K_cg, ...
    j_ex_sat, K_ex, ...
    u_ss, v_ss, E_st);



% % % % le correnti dark sono quelle all'istante t=0, in posizione 1 dei vettori
% % % curr_cGMP_dark=curr_cGMP(1);
% % % curr_Ca_dark  =curr_Ca(1);
% % % curr_dark=curr_cGMP_dark+curr_Ca_dark;

% calcola il drop
curr_dark=curr_tot(:,1);
drop=100*(1-curr_tot./repmat(curr_dark,1,1+n_step_t/downsample));
drop_r=repmat(curr_dark,1,1+n_step_t/downsample)-curr_tot;
% informativa
[max_drop,I]=max(drop,[],2);
[max_drop_r,I]=max(drop_r,[],2);

time_to_peak=(I-1)*t_fin/n_step_t*downsample;

% informativa
fprintf('\nMaximum drop and corresponding instant, for each sample\n');
disp([max_drop,time_to_peak])

disp([max_drop_r*1e12,time_to_peak])
curr_dark

figure(1)
plot(time_downsample,drop)

% salvataggio delle simulazioni stocastiche in cyto.mat
% saving stochastic simulations in cyto.mat
save('cyto', 'sol', 'drop', 'drop_r', 'max_drop', 'time_to_peak', 'time_downsample')

% % % % salvataggio del workspace in foto.mat
% % % % saving workspace in foto.mat
% % % save foto

% % % profile viewer

return
